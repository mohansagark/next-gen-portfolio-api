openapi: 3.0.0
info:
  title: Portfolio API
  description: Modern backend API for portfolio website with modular architecture
  version: 1.0.0
  contact:
    name: Mohan Sagar
    url: https://devmohan.in
    email: contact@devmohan.in

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://portfolio-api.railway.app/api/v1
    description: Production server

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: string
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Education:
      type: object
      properties:
        id:
          type: string
        institution:
          type: string
        degree:
          type: string
        field:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        description:
          type: string
        grade:
          type: string
        location:
          type: string
        logoUrl:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EducationInput:
      type: object
      required:
        - institution
        - degree
        - startDate
      properties:
        institution:
          type: string
        degree:
          type: string
        field:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        description:
          type: string
        grade:
          type: string
        location:
          type: string
        logoUrl:
          type: string

    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        longDescription:
          type: string
        technologies:
          type: array
          items:
            type: string
        liveUrl:
          type: string
        githubUrl:
          type: string
        imageUrl:
          type: string
        images:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [completed, in-progress, planned]
        featured:
          type: boolean
        category:
          type: string
        order:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectInput:
      type: object
      required:
        - title
        - description
        - technologies
        - startDate
      properties:
        title:
          type: string
        description:
          type: string
        longDescription:
          type: string
        technologies:
          type: array
          items:
            type: string
        liveUrl:
          type: string
        githubUrl:
          type: string
        imageUrl:
          type: string
        images:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [completed, in-progress, planned]
        featured:
          type: boolean
        category:
          type: string
        order:
          type: integer

    Experience:
      type: object
      properties:
        id:
          type: string
        company:
          type: string
        position:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        description:
          type: string
        technologies:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string
        companyUrl:
          type: string
        logoUrl:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ExperienceInput:
      type: object
      required:
        - company
        - position
        - startDate
        - description
      properties:
        company:
          type: string
        position:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        description:
          type: string
        technologies:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string
        companyUrl:
          type: string
        logoUrl:
          type: string

    Contact:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        subject:
          type: string
        message:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [unread, read, replied]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ContactInput:
      type: object
      required:
        - name
        - email
        - message
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        subject:
          type: string
        message:
          type: string
        phone:
          type: string

paths:
  /education:
    get:
      tags:
        - Education
      summary: Get all education records
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Education'

    post:
      tags:
        - Education
      summary: Create new education record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Education'

  /education/{id}:
    get:
      tags:
        - Education
      summary: Get education record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Education'
        '404':
          description: Not found

    put:
      tags:
        - Education
      summary: Update education record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Education'

    delete:
      tags:
        - Education
      summary: Delete education record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: featured
          in: query
          schema:
            type: boolean
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'

    post:
      tags:
        - Projects
      summary: Create new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'

  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'

    put:
      tags:
        - Projects
      summary: Update project
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Project'

    delete:
      tags:
        - Projects
      summary: Delete project
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /experience:
    get:
      tags:
        - Experience
      summary: Get all experience records
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Experience'

    post:
      tags:
        - Experience
      summary: Create new experience record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Experience'

  /experience/{id}:
    get:
      tags:
        - Experience
      summary: Get experience record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Experience'

    put:
      tags:
        - Experience
      summary: Update experience record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceInput'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Experience'

    delete:
      tags:
        - Experience
      summary: Delete experience record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /contact:
    get:
      tags:
        - Contact
      summary: Get all contact messages
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [unread, read, replied]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Contact'

    post:
      tags:
        - Contact
      summary: Create new contact message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Contact'

  /contact/{id}:
    get:
      tags:
        - Contact
      summary: Get contact message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Contact'

    put:
      tags:
        - Contact
      summary: Update contact message status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [unread, read, replied]
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Contact'

    delete:
      tags:
        - Contact
      summary: Delete contact message
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
